
Lab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000286  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000812  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069e  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9e:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT_PIN_CHANGE>:
	sei();				//Encender interrupciones
}

void INIT_PIN_CHANGE()
{//Habilitar interrupciones de pin change 
	PCICR |= (1 << PCIE1);     // Habilitar interrupción de cambio de estado 
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);  // Habilita interrupción para PORTC2 (bit 2 de Puerto C)
  b0:	ec e6       	ldi	r30, 0x6C	; 108
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);  // Habilita interrupción para PORTC3 (bit 3 de Puerto C)
  ba:	80 81       	ld	r24, Z
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <INIT_TMR0>:
}

void INIT_TMR0()
{
	TCCR0A =0;	//Configurarlo en modo normal
  c2:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<< CS01) | (1<<CS00) ;	//configurar un prescaler de 64
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	85 bd       	out	0x25, r24	; 37
	TCNT0 =0Xf0;	//Desborde cada 5 ms
  ca:	80 ef       	ldi	r24, 0xF0	; 240
  cc:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1 << TOIE0);	//Habilitar interrupciones
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  d4:	08 95       	ret

000000d6 <INIT_ADC>:
	 
}

void	INIT_ADC()
{
	ADMUX = 0;	//Apagar todo
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);	
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	ADMUX &=~(1<<REFS1);
  e2:	80 81       	ld	r24, Z
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
	
	ADCSRA = 0;	//Apagar todo
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
  fa:	80 81       	ld	r24, Z
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <setup>:
	
}

void setup()
{
	cli();			//Apagar interrupciones
 10e:	f8 94       	cli
	//Configuraciones de prescaler principal 
	CLKPR= (1<<CLKPCE); 
 110:	e1 e6       	ldi	r30, 0x61	; 97
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
	CLKPR =(1<<CLKPS2);	//Setear el prescaler en 16 -> 1MHz
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	80 83       	st	Z, r24
	
	
	INIT_TMR0();	//Llamar a la configuración del timer
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <INIT_TMR0>
	DDRB =0xFF;		//Configurarlos como saldia
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
	PORTB =0x00;		//Inicialmente apagado
 124:	15 b8       	out	0x05, r1	; 5
	
	DDRD =0xFF;		//Configurarlos como saldia
 126:	8a b9       	out	0x0a, r24	; 10
	PORTD =0x00;		//Inicialmente apagado
 128:	1b b8       	out	0x0b, r1	; 11
	
	DDRC &= ~((1 << DDC2) | (1 << DDC3));	//Configurar el bit 2 y 3 del puerto C como entrada
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	83 7f       	andi	r24, 0xF3	; 243
 12e:	87 b9       	out	0x07, r24	; 7
	PORTC|=(1<<PORTC2)|(1<<PORTC3);		//Pull up activado
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8c 60       	ori	r24, 0x0C	; 12
 134:	88 b9       	out	0x08, r24	; 8
	
	DDRC |=((1 << DDC0) | (1 << DDC1)| (1 << DDC4) | (1 << DDC5));	//Configurar el bit 0 y 1 del puerto C como salida
 136:	87 b1       	in	r24, 0x07	; 7
 138:	83 63       	ori	r24, 0x33	; 51
 13a:	87 b9       	out	0x07, r24	; 7
	PORTC|=~(1<<PORTC4)|(1<<PORTC5);		//Inicialmente apagado
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	8f 6e       	ori	r24, 0xEF	; 239
 140:	88 b9       	out	0x08, r24	; 8
	UCSR0B = 0x00; // Inicialmente apagado
 142:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	INIT_PIN_CHANGE();
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT_PIN_CHANGE>
	INIT_ADC();
 14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <INIT_ADC>
	ADCSRA |= (1 << ADSC);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
	sei();				//Encender interrupciones
 158:	78 94       	sei
 15a:	08 95       	ret

0000015c <main>:
void	INIT_ADC();
//main
int main(void)
{
	
    setup();
 15c:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
	
	while (1) {
		PORTB = contador;  // Actualiza PORTB con el valor del contador	
 160:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 164:	85 b9       	out	0x05, r24	; 5
		//display1= 0x3f;
		//display2=0x06;

		if (contador & (1 << 6) ){
 166:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 16a:	86 ff       	sbrs	r24, 6
 16c:	04 c0       	rjmp	.+8      	; 0x176 <main+0x1a>
			PORTC|=(1<<PORTC0);
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	81 60       	ori	r24, 0x01	; 1
 172:	88 b9       	out	0x08, r24	; 8
 174:	03 c0       	rjmp	.+6      	; 0x17c <main+0x20>
		}
			else{
				PORTC&=~(1<<PORTC0);	
 176:	88 b1       	in	r24, 0x08	; 8
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	88 b9       	out	0x08, r24	; 8
			}
	
		if (contador & (1 << 7)){
 17c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 180:	88 23       	and	r24, r24
 182:	1c f4       	brge	.+6      	; 0x18a <main+0x2e>
			PORTC|=(1<<PORTC1);
 184:	88 b1       	in	r24, 0x08	; 8
 186:	82 60       	ori	r24, 0x02	; 2
 188:	88 b9       	out	0x08, r24	; 8
		}
		
		if (contador | ~(1 << 7)){
 18a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
			PORTC&=~(1<<PORTC1);
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	88 b9       	out	0x08, r24	; 8
 194:	e5 cf       	rjmp	.-54     	; 0x160 <main+0x4>

00000196 <__vector_4>:
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
}

//**********Vector de interupción:************************/
ISR(PCINT1_vect) {
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	//Leer estado actua de los botones
	uint8_t	estado_actual=PINC;
 1a2:	86 b1       	in	r24, 0x06	; 6
	
	//Detectar flanco
	if (!(estado_actual & (1<<PINC2))){
 1a4:	82 fd       	sbrc	r24, 2
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <__vector_4+0x1e>
		contador++;
 1a8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <contador>
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <__vector_4+0x2c>
	}
	else if (!(estado_actual & (1<<PINC3))){
 1b4:	83 fd       	sbrc	r24, 3
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <__vector_4+0x2c>
		contador--;
 1b8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <contador>
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <contador>
	}
	} 
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_21>:
	
ISR(ADC_vect)

{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	Pbaja= ADCH & 0X0F;
 1e2:	e9 e7       	ldi	r30, 0x79	; 121
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	a0 81       	ld	r26, Z
 1e8:	af 70       	andi	r26, 0x0F	; 15
 1ea:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <Pbaja>
	P_alta= (ADCH>>4) & 0X0f;
 1ee:	e0 81       	ld	r30, Z
 1f0:	e2 95       	swap	r30
 1f2:	ef 70       	andi	r30, 0x0F	; 15
 1f4:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <P_alta>
	display2 =DISPLAY[Pbaja];
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	a0 50       	subi	r26, 0x00	; 0
 1fc:	bf 4f       	sbci	r27, 0xFF	; 255
 1fe:	8c 91       	ld	r24, X
 200:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <display2>
	display1 =DISPLAY[P_alta];
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e0 50       	subi	r30, 0x00	; 0
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	80 81       	ld	r24, Z
 20c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <display1>
	//display1 = 0x6D;

	

	ADCSRA |= (1 << ADSC);
 210:	ea e7       	ldi	r30, 0x7A	; 122
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 83       	st	Z, r24
	
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
	PORTC &=~((1<<PORTC4)|(1<<PORTC5));	//apagar todos los displays
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	8f 7c       	andi	r24, 0xCF	; 207
 23e:	88 b9       	out	0x08, r24	; 8
	MULTIPLEX ++;			//incrementar multiplex
 240:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
					
	switch (MULTIPLEX){
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	59 f0       	breq	.+22     	; 0x264 <__vector_16+0x36>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	81 f0       	breq	.+32     	; 0x272 <__vector_16+0x44>
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	81 f4       	brne	.+32     	; 0x276 <__vector_16+0x48>
		case 1:
		PORTD=display1;
 256:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <display1>
 25a:	8b b9       	out	0x0b, r24	; 11
		PORTC |=(1 << PORTC4);
 25c:	88 b1       	in	r24, 0x08	; 8
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	88 b9       	out	0x08, r24	; 8
		break;
 262:	09 c0       	rjmp	.+18     	; 0x276 <__vector_16+0x48>
		
		case 2:
		PORTD=display2;
 264:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <display2>
 268:	8b b9       	out	0x0b, r24	; 11
		PORTC |=(1<< PORTC5);
 26a:	88 b1       	in	r24, 0x08	; 8
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	88 b9       	out	0x08, r24	; 8
		break;
 270:	02 c0       	rjmp	.+4      	; 0x276 <__vector_16+0x48>
		
		case 3:
		MULTIPLEX=0;
 272:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		break;
		
		default:
		break;
	}
}
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>

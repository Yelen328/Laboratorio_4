
Prelaboratorio_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000016c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000713  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000674  00000000  00000000  00000927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025d  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  88:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <INIT_PIN_CHANGE>:
	sei();
}

void INIT_PIN_CHANGE()
{//Habilitar interrupciones de pin change 
	PCICR |= (1 << PCIE1);     // Habilitar interrupción de cambio de estado 
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);  // Habilita interrupción para PORTC2 (bit 2 de Puerto C)
  9a:	ec e6       	ldi	r30, 0x6C	; 108
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);  // Habilita interrupción para PORTC3 (bit 3 de Puerto C)
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <setup>:
	
}

void setup()
{
	cli();
  ac:	f8 94       	cli
	DDRB =0xFF;		//Configurarlos como saldia
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 b9       	out	0x04, r24	; 4
	PORTB =0xff;		//Inicialmente apagado
  b2:	85 b9       	out	0x05, r24	; 5
	DDRC =0x00;	//Configurar el bit 2 y 3 del puerto C como entrada
  b4:	17 b8       	out	0x07, r1	; 7
	PORTC|=(1<<PORTC2)|(1<<PORTC3);		//Pull up activado
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	8c 60       	ori	r24, 0x0C	; 12
  ba:	88 b9       	out	0x08, r24	; 8
	INIT_PIN_CHANGE();
  bc:	0e 94 48 00 	call	0x90	; 0x90 <INIT_PIN_CHANGE>
	sei();
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <main>:

//main
int main(void)
{
	
    setup();
  c4:	0e 94 56 00 	call	0xac	; 0xac <setup>
	while (1) {
		PORTB = contador;  // Actualiza PORTB con el valor del contador
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <main+0x4>

000000d0 <__vector_4>:
	PCMSK1 |= (1 << PCINT10);  // Habilita interrupción para PORTC2 (bit 2 de Puerto C)
	PCMSK1 |= (1 << PCINT11);  // Habilita interrupción para PORTC3 (bit 3 de Puerto C)
}

//Vector de interupción:
ISR(PCINT1_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	//Leer estado actua de los botones
	uint8_t	estado_actual=PINC;
  dc:	86 b1       	in	r24, 0x06	; 6
	
	//Detectar flanco
	if (~(estado_actual & (1<<PORTC2))){
		contador++;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	else if (~(estado_actual & (1<<PORTC3))){
		contador--;
	}
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
